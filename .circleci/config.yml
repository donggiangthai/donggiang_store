---
version: 2.1

orbs:
  docker: circleci/docker@2.2.0
  aws-eks: circleci/aws-eks@2.2.0

commands:
  exporter:
    steps:
      - run:
          name: Export environment variable
          command: |
            echo 'export TAG="${CIRCLE_SHA1:0:7}"' >> "$BASH_ENV"

  setup-aws-cli:
    parameters:
      aws-access-key-id:
        default: AWS_ACCESS_KEY_ID
        description: >
          AWS access key id for IAM role. Set this to the name of
          the environment variable you will use to hold this
          value, i.e. AWS_ACCESS_KEY.
        type: env_var_name
      aws-region:
        default: AWS_DEFAULT_REGION
        description: >
          Env var of AWS region to operate in
          (defaults to AWS_DEFAULT_REGION)
        type: env_var_name
      aws-secret-access-key:
        default: AWS_SECRET_ACCESS_KEY
        description: >
          AWS secret key for IAM role. Set this to the name of
          the environment variable you will use to hold this
          value, i.e. AWS_SECRET_ACCESS_KEY.
        type: env_var_name
      profile-name:
        default: default
        description: Profile name to be configured.
        type: string
    steps:
      - run:
          name: "Install AWS CLI"
          command: |
            if aws --version | grep "aws-cli/" > /dev/null
            then
              echo "AWS CLI is already installed, skipping installation."
              exit 0
            fi

            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
      - run:
          name: "Configure AWS credential"
          environment:
            PARAM_AWS_CLI_ACCESS_KEY_ID: <<parameters.aws-access-key-id>>
            PARAM_AWS_CLI_SECRET_ACCESS_KEY: <<parameters.aws-secret-access-key>>
            PARAM_AWS_CLI_REGION: <<parameters.aws-region>>
            PARAM_AWS_CLI_PROFILE_NAME: <<parameters.profile-name>>
          command: |
            if aws --version | grep "aws-cli/" > /dev/null
            then
              echo "Due to AWS CLI is already installed, skipping configuration AWS credential."
              exit 0
            fi

            PARAM_AWS_CLI_ACCESS_KEY_ID=$(eval echo "\$$PARAM_AWS_CLI_ACCESS_KEY_ID")

            PARAM_AWS_CLI_SECRET_ACCESS_KEY=$(eval echo "\$$PARAM_AWS_CLI_SECRET_ACCESS_KEY")

            PARAM_AWS_CLI_REGION=$(eval echo "\$$PARAM_AWS_CLI_REGION")

            if [ -z "$PARAM_AWS_CLI_ACCESS_KEY_ID" ] || [ -z "${PARAM_AWS_CLI_SECRET_ACCESS_KEY}" ]
            then
              echo "Cannot configure profile. AWS access key id and AWS secret access key must be provided."
              exit 1
            fi

            aws configure set \
              aws_access_key_id "$PARAM_AWS_CLI_ACCESS_KEY_ID" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

            aws configure set \
              aws_secret_access_key "$PARAM_AWS_CLI_SECRET_ACCESS_KEY" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

            aws configure set \
              region "$PARAM_AWS_CLI_REGION" \
              --profile "$PARAM_AWS_CLI_PROFILE_NAME"

jobs:
  test-and-lint:
    docker:
      - image: cimg/python:3.10
    working_directory: ~/donggiang_store
    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: create virtualenv
          command: |
            make setup
      - run:
          name: install dependencies
          command: |
            . .donggiang_store/bin/activate
            make install
      - save_cache:
          paths:
            - ./.donggiang_store
          key: v1-dependencies-{{ checksum "requirements.txt" }}
      # run tests!
      - run:
          name: run tests
          command: |
            . .donggiang_store/bin/activate
            make test
      # run lints!
      - setup_remote_docker
      - run:
          name: run lint
          command: |
            . .donggiang_store/bin/activate
            make lint

  docker-task:
    executor: docker/docker
    working_directory: ~/donggiang_store
    steps:
      - checkout
      - exporter
      - setup_remote_docker
      - run:
          name: install setup aws-cli dependencies
          command: |
            sudo apt-get install \
              --quiet --no-install-recommends \
              --fix-broken --show-progress --assume-yes \
            curl \
            unzip
      - setup-aws-cli
      - docker/install-docker-compose
      - run:
          name: build image
          command: |
            docker-compose --file "docker-compose.prod.yml" --project-name "donggiang_store-prod" build
      - run:
          name: push image
          command: |
            echo ${DOCKER_HUB_PASSWORD} | \
            docker login --username ${DOCKER_HUB_ID} --password-stdin
            docker-compose --file "docker-compose.prod.yml" --project-name "donggiang_store-prod" push

  eks-deployment:
    docker:
      - image: cimg/python:3.10
    parameters:
      cluster-name:
        description: |
          Name of the EKS cluster
        type: string
        default: capstone
    steps:
      - checkout
      - exporter
      - aws-eks/update-kubeconfig-with-authenticator:
          cluster-name: << parameters.cluster-name >>
          aws-profile: default
          aws-region: us-east-1
          install-kubectl: true
          kubectl-version: v1.26.4
      - run:
          name: install dependencies
          command: |
            sudo apt-get update --fix-missing \
            && sudo apt-get install \
              --quiet --no-install-recommends \
              --fix-broken --show-progress --assume-yes \
            gettext \
            jq
      - run:
          name: apply
          command: |
            cd kubernetes/prod
            # Create network
            kubectl apply \
              --filename donggiang-store-default-networkpolicy.yaml
            
            # Create Redis
            kubectl apply \
              --filename redis-deployment.yaml,redis-service.yaml
            
            # Create monitor for celery worker
            kubectl apply \
              --filename celery-monitor-deployment.yaml,celery-monitor-service.yaml
            
            # Create load balancer service
            kubectl apply \
              --filename nginx-service.yaml
            
            # Get ELB host name
            export ELB_URL=$(kubectl get svc nginx -o json | jq -r '.status.loadBalancer.ingress[0].hostname')
            # Substitution variable
            envsubst < web-deployment.yaml > web-deployment-prod.yaml
            kubectl apply \
              --filename web-deployment-prod.yaml,web-service.yaml
            
            # Create nginx proxy
            # Substitution variable
            envsubst < nginx-deployment.yaml > nginx-deployment-prod.yaml
            kubectl apply \
              --filename nginx-deployment-prod.yaml
      - run:
          name: get rollout status
          command: |
            kubectl rollout status deployment/web
      - run:
          name: verification
          command: |
            kubectl get all

workflows:
  donggiang_store-workflows:
    jobs:
      - test-and-lint
      - docker-task:
          requires:
            - test-and-lint
          filters:
            branches:
              only:
                - master
      - eks-deployment:
          requires:
            - docker-task
          filters:
            branches:
              only:
                - master
