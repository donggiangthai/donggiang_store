apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f .\docker-compose.prod.yml -v -o .\kubernetes\prod\
    kompose.version: 1.28.0 (c4137012e)
  creationTimestamp: null
  labels:
    io.kompose.service: web
  name: web
spec:
  replicas: 3
  selector:
    matchLabels:
      io.kompose.service: web
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      annotations:
        kompose.cmd: C:\ProgramData\chocolatey\lib\kubernetes-kompose\tools\kompose.exe convert -f .\docker-compose.prod.yml -v -o .\kubernetes\prod\
        kompose.version: 1.28.0 (c4137012e)
      creationTimestamp: null
      labels:
        io.kompose.network/donggiang-store-default: "true"
        io.kompose.service: web
    spec:
      containers:
        - env:
            - name: AWS_DEFAULT_REGION
              value: ${AWS_DEFAULT_REGION}
            - name: DATABASE
              value: postgres
            - name: BROKER_URL
              value: redis://redis:6379/0
            - name: DEBUG
              value: "False"
            - name: USE_S3
              value: "True"
            - name: ELB_URL
              value: ${ELB_URL}
          image: ${DOCKER_HUB_ID}/donggiang_store-web:${TAG}
          name: web
          ports:
            - containerPort: 8000
          readinessProbe:
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 300
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
#          startupProbe:
#            httpGet:
#              path: /health
#              port: 8000
#            failureThreshold: 30
#            periodSeconds: 10
          livenessProbe:
            initialDelaySeconds: 600
            periodSeconds: 15
            timeoutSeconds: 10
            successThreshold: 1
            failureThreshold: 300
            httpGet:
              path: /health
              port: 8000
              scheme: HTTP
          resources: {}
      restartPolicy: Always
status: {}
